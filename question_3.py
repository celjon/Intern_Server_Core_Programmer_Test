#Вопрос №3
#На языке Python или С++ предложить алгоритм, который быстрее всего (по процессорным тикам) отсортирует данный ей массив чисел. Массив может быть любого размера со случайным порядком чисел (в том числе и отсортированным). Объяснить, почему вы считаете, что функция соответствует заданным критериям.


def insertion_sort(arr, left, right):
    """Сортировка вставками для небольших подмассивов.

    Этот метод эффективен для небольших массивов, так как имеет низкий накладной расход и не требует дополнительной памяти.
    """
    for i in range(left + 1, right + 1):
        key = arr[i]
        j = i - 1
        while j >= left and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key


def quick_sort(arr, left, right):
    """Быстрая сортировка для больших подмассивов.

    Быстрая сортировка обладает хорошей средней производительностью, но её рекурсивный характер может привести к большим затратам памяти и ухудшению производительности в случае неудачного выбора опорного элемента.
    """
    if left < right:
        pivot_index = partition(arr, left, right)
        quick_sort(arr, left, pivot_index - 1)
        quick_sort(arr, pivot_index + 1, right)


def partition(arr, left, right):
    """Разделение массива и выбор опорного элемента.

    Выбирается опорный элемент (последний в подмассиве) и массив перераспределяется так, чтобы все элементы меньше опорного были до него, а больше — после.
    """
    pivot = arr[right]
    i = left - 1
    for j in range(left, right):
        if arr[j] < pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    arr[i + 1], arr[right] = arr[right], arr[i + 1]
    return i + 1


def hybrid_sort(arr):
    """Гибридная сортировка: комбинация быстрой сортировки и сортировки вставками.

    Используется быстрая сортировка для больших подмассивов и сортировка вставками для небольших подмассивов.
    Это позволяет использовать преимущества обоих алгоритмов: быстрая сортировка для больших массивов и сортировка вставками для малых.
    """

    def _hybrid_sort(arr, left, right):
        # Порог для сортировки вставками
        if right - left + 1 < 16:
            insertion_sort(arr, left, right)
        else:
            if left < right:
                pivot_index = partition(arr, left, right)
                _hybrid_sort(arr, left, pivot_index - 1)
                _hybrid_sort(arr, pivot_index + 1, right)

    _hybrid_sort(arr, 0, len(arr) - 1)

# Пояснение выбора метода:
# Я выбрал гибридную сортировку, так как она сочетает в себе преимущества быстрой сортировки и сортировки вставками. Быстрая сортировка обладает хорошей производительностью для больших данных, но её эффективность может снизиться для небольших подмассивов. В таких случаях сортировка вставками работает быстрее. Комбинирование этих методов позволяет достигать оптимальной производительности при различных размерах и состояниях массивов.
